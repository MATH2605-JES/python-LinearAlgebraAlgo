import numpy as np
import Util

#Seth
def jacobi_iter(initData): # x = -[D^-1](L+U)x + [D^-1]*b
    A = np.array([[1, .5, 1.0/3], [.5, 1, .25],[1.0/3, .25, 1]])
    bVec = np.array([[.1],[.1],[.1]])
    diagonal = Util.getDiag(A)
    lu = A - diagonal
    sInv = Util.matrix_inverse(diagonal)
    return iterate(initData, sInv, lu, bVec)

#Seth
def gs_iter(initData): # x = -[(L+D)^-1]*Ux + [(L+D)^-1]*b
    A = np.array([[1, .5, 1.0/3], [.5, 1, .25],[1.0/3, .25, 1]])
    bVec = np.array([[.1],[.1],[.1]])
    ld = Util.getLowerDiag(A)
    upper = A - ld
    sInv = Util.matrix_inverse(ld)
    return iterate(initData, sInv, upper, bVec)

#Seth
def iterate(data, sInv, T, bVec, maxIt=100, tol=0.00005):
    for i in range(maxIt):
        previousData = data
        temp = Util.multiply_matrix(sInv, T * -1)
        data = Util.multiply_matrix(temp, previousData)
        data += Util.multiply_matrix(sInv, bVec)
        deltaData = np.absolute(previousData - data)
        if np.less_equal(deltaData, np.ones(data.shape) * tol).all():
            print "interation: ", i, "\n", data
            return data, i
    return None